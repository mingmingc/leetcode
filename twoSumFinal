/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */

 //reduces time complexity from O(n^2) to O(n)
 //O(n) space complexity: hash stores n values at most
 
let twoSum = function(nums, target) {
    //keep key/value pairs:
    //key: difference 
    //val: the index of the *complementing* number needed to add to target
   const  comp = {};
  
    for (i=0; i<=nums.length; i++) {
        //if value exist in hash, return the index of diff & index of current num adding to target
        if (comp[nums[i]] >= 0) {
            return [comp[nums[i]], i]
        }
        comp[target-nums[i]] = i
        //difference between target and current num in key,
        //current index in val
    }
};

