const twoSum = function(nums, target) {
    const comp = {};
    for(let i=0; i<nums.length; i++){
        if(comp[nums[i] ]>=0){
            return [ comp[nums[i] ] , i]
        }
        comp[target-nums[i]] = i
    }
};

// comp is going to be a key/value store where
// key === number in input array
// value === an index. Specifically,the index of the 
// complementing number needed to add to get the target.
// So 3 + 4 === 7, the key 4 would have the index 1 
// assigned to it in the array [2,3,4]
// now we iterate over nums. We hit the first condition:
if(comp[nums[i] ]>=0)

// at this point nums[i] === 2
// comp looks like this:
{
  '2': undefined
}

// so we go past the first conidtion on the first run 
// always, b/c we won't have an index assigned, that comes later.
// Now we hit:
comp[target-nums[i]] = i
// inside the brackets, we have comp[7 - 2] = 0
// or comp[5] = 0
// now comp looks like this:
// (by the way you wouldn't have keys assigned the value 
// undefined, they just would not exist in the object. I'm 
// doing this for clarity sake)
{
  '2': undefined,
  '5': 0
}
// next run: we have 3 and comp looks like:
{
  '2': undefined,
  '3': undefined,
  '5': 0
}
// then the last line comp[7-3] = 1 
// Or comp[4] = 1
{
  '2': undefined,
  '3': undefined,
  '4': 1
  '5': 0
}
// On our last run we look up comp[4] and we have a match
//greater than 0 so we enter the condition
// then we return the value of comp[4] 
//(the index of the complementing number to add to get to target, 3) 
//and the current index in an array: [1,2]
